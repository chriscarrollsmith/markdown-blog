---
description: 
globs: 
alwaysApply: true
---
## Programming philosophy

Keep commits atomic. Always make the smallest code changes that will achieve your goals.

## Resolving Github issues

If asked to resolve a Github issue, check if you're already on an issue branch with `git branch -v`. If not, check if an issue branch already exists with `git branch -r`.

If no issue branch exists, you can create one and switch to it with `gh issue develop $ISSUE_NUMBER -c` (assuming you have set the `ISSUE_NUMBER` variable in your shell).

Make your changes, validate them, then open a pull request like `gh pr create -t "Descriptive title" -b $(cat temp/summary_of_changes.md)` (assuming you have written a `temp/summary_of_changes.md` file).

## Python dependency management with `uv`

This project uses `uv` to manage dependencies and run Python files.

Add Python dependencies to the workspace like:

```bash
uv add pydantic # add --dev flag for development dependencies
```

## Python programming patterns

Always write type-annotated Python code that will pass a `mypy` check.

## HTML templating patterns

Avoid introducing new named CSS classes. This project is themed, and the theme should mostly be controlled by element selectors rather than class or id selectors.

## Markdown style

`commonmark` follows the CommonMark specification, which is more permissive than the original markdown.pl spec. This allows for more flexible formatting, such as no blank line between headers and lists, and supports both two-space and four-space indentation for nested lists.

``` markdown
**You can now do this**
- List item can be directly after a header without a blank line
```

``` markdown
**This still works too**

- List item with blank line separation
```

Both two-space and four-space indentation work for nested lists:

``` markdown
- First level
  - Second level (two spaces)
- First level
    - Second level (four spaces)
```